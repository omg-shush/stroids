#version 450

layout (local_size_x = 10, local_size_y = 10, local_size_z = 10) in;

layout (push_constant) uniform Dimensions {
    uint width;
    uint height;
    uint depth;
    int startX;
    int startY;
    int startZ;
} dims;

// 5 tri = 15 vert = 45 floats max per cube
struct CubeVertices {
    float vertices[45];
};

layout (set = 0, binding = 0) readonly buffer TriangulationBuffer {
    float cubes[45 * 256];
} triArray;
layout (set = 0, binding = 1) buffer OutputBuffer {
    float result[];
} outputBuffer;

layout(set = 1, binding = 0, r32f) uniform readonly image3D noiseTex;

float noise(uvec3 pos) {
    return imageLoad(noiseTex, ivec3(pos)).r;
}

void main() {
    ivec3 start = ivec3(dims.startX, dims.startY, dims.startZ);
    uvec3 cubePos = uvec3(gl_GlobalInvocationID.xyz);

    // Sample noise at every corner
    uint pattern = 0;
    for (int corner = 0; corner < 8; corner++) {
        uvec3 samplePos = cubePos;
        samplePos.x += (corner & 4) >> 2;
        samplePos.y += (corner & 2) >> 1;
        samplePos.z += (corner & 1) >> 0;
        if (noise(samplePos) > 0.0) {
            pattern |= 1 << corner;
        }
    }
    CubeVertices cube;
    for (uint i = 0; i < 45; i++) {
        cube.vertices[i] = triArray.cubes[pattern * 45 + i];
    }

    // Add cubePos to every vertex
    for (uint vert = 0; vert < 15; vert++) {
        vec3 vertex = vec3(cube.vertices[vert * 3 + 0], cube.vertices[vert * 3 + 1], cube.vertices[vert * 3 + 2]);
        if (vertex.x == 0.5) { // Adjust in X direction
            float lo = noise(cubePos + uvec3(vertex - vec3(0.5, 0.0, 0.0)));
            float hi = noise(cubePos + uvec3(vertex + vec3(0.5, 0.0, 0.0)));
            vertex.x = (0.0 - lo) / (hi - lo);
        } else if (vertex.y == 0.5) { // Adjust in Y direction
            float lo = noise(cubePos + uvec3(vertex - vec3(0.0, 0.5, 0.0)));
            float hi = noise(cubePos + uvec3(vertex + vec3(0.0, 0.5, 0.0)));
            vertex.y = (0.0 - lo) / (hi - lo);
        } else if (vertex.z == 0.5) { // Adjust in Z direction
            float lo = noise(cubePos + uvec3(vertex - vec3(0.0, 0.0, 0.5)));
            float hi = noise(cubePos + uvec3(vertex + vec3(0.0, 0.0, 0.5)));
            vertex.z = (0.0 - lo) / (hi - lo);
        }
        cube.vertices[vert * 3 + 0] = vertex.x + float(dims.startX) + float(cubePos.x);
        cube.vertices[vert * 3 + 1] = vertex.y + float(dims.startY) + float(cubePos.y);
        cube.vertices[vert * 3 + 2] = vertex.z + float(dims.startZ) + float(cubePos.z);
    }

    // Write vertices to output
    if (cubePos.x < dims.width && cubePos.y < dims.height && cubePos.z < dims.depth) {
        uint outputPos = (cubePos.x * dims.height * dims.depth) + (cubePos.y * dims.depth) + cubePos.z; // serial # of this cube
        for (uint i = 0; i < 45; i++) {
            outputBuffer.result[outputPos * 45 + i] = cube.vertices[i];
        }
    }
}
